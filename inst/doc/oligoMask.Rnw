\documentclass[10pt]{article}
\usepackage[margin=1.0in]{geometry}
\usepackage[utf8]{inputenc}
\usepackage[parfill]{parskip}
\SweaveOpts{keep.source=TRUE} 

\title{oligoMask Vignette}
\author{Daniel Bottomly}
%\VignetteIndexEntry{oligoMask}
\begin{document}

\maketitle

\section{The oligoMask package}

The \texttt{oligoMask} package is designed to work in conjunction with the \texttt{oligo} package to facilitate removal of aberrant probe expression prior to RMA procedure for Affymetrix arrays.
Currently it works by removing suspect probes from the overall expression matrix prior to the call to the RMA function.  These suspect probe annotations are most easily derived from VCF files with the parsed data stored in an SQLite database.
This database can be optionally wrapped in an R package with appropriate metadata to facilitate sharing and reproducibility.  As our main use case involves mice and specifically the Affymetrix Mouse Gene ST array, we provide convenience functions
to enable creation of an oligoMask database using VCF files from the Sanger Mouse Genomes Project and the tab-delimited probe sequence files distributed by Affymetrix as well as standard Bioconductor functionality.
As a demonstration, we will utilize a portion of the array data of (Sun et al. 2012) and a variant mask generated for the NOD/ShiLtJ mouse inbred strain from the Sanger Mouse Genomes Project. 

\section{Data preparation}

The expression data can be retrieved from GEO using the accession number: GSE33822.  Retrieval from R can easily be carried out using the \texttt{GEOquery} package.  As our interest was in the CEL files we first downloaded them and then
kept only the 8 arrays which corresponded to wholebrain with the vehicle treatment that were run on version 1 of the Mouse Gene ST array.

<<eval=FALSE, echo=TRUE>>=

library(GEOquery)
library(GEOmetadb)
library(pd.mogene.1.0.st.v1)

gene.files <- getGEOSuppFiles("GSE33822")

cel.dir <- tempfile()
untar(rownames(gene.files)[1], exdir=cel.dir)

meta.file <- getSQLiteFile()

meta.con <- dbConnect(SQLite(),meta.file)

annot <- dbGetQuery(meta.con, "SELECT gsm.title AS sample_name, gsm.supplementary_file AS cel_name 
	FROM gsm JOIN gpl USING (gpl) WHERE series_id = 'GSE33822' AND gpl.title LIKE
	'[MoGene-1_0-st]%' AND gsm.title LIKE 'Wholebrain_%_Veh%'")

annot$clean.cel.path <- file.path(cel.dir, basename(annot$cel_name))

dbDisconnect(meta.con)

sun.gene.fs <- read.celfiles(filenames=annot$clean.cel.path,  sampleNames=annot$sample_name,
	pkgname="pd.mogene.1.0.st.v1")

save(sun.gene.fs, file="SunGeneFS.RData")

@

<<eval=FALSE, echo=FALSE>>=
##adapted from Biobase::makeDataPackage
##don't really need to use this over and over again so won't make a derived method
##for now...
require(Biobase)

load("SunGeneFS.RData")

sym = list(AUTHOR = "Daniel Bottomly", VERSION = "0.99.0", 
            LICENSE = "GPL-3", TITLE = "Experimental Data Package for oligoMask",
	    MAINTAINER = "Daniel Bottomly <bottomly@ohsu.edu>", BVIEWS ="ExperimentData", FORMAT="",
	    DESCRIPTION="Package containing data from Sun et al 2012 as described in the vignette")
res = createPackage("oligoMaskData", destinationDir = ".", 
            originDir = system.file("ExpressionSet", package = "Biobase"), 
            symbolValues = sym, unlink = TRUE)
	    
datadir = file.path(res$pkgdir, "data")

dir.create(datadir, showWarnings = FALSE)

outfile = file.path(datadir, "oligoMaskData.RData")

oligoMaskData <- sun.gene.fs

save(oligoMaskData, file = outfile)

#then was built as:

#R CMD build --resave-data oligoMaskData

@

Here we can build a database package containing the variants from the NOD strain relative to the reference genome which is from C57BL/6J, the strain used as a comparison here.  Note that for
consistency we built a custom BSGenome package for GRCm38 from the genome provided by Sanger as their reference (ftp://ftp-mouse.sanger.ac.uk/ref/).

<<eval=FALSE, echo=TRUE>>=

library(oligoMask)
library(BSgenome.Mmusculus.GRC.m38)

vcf.files <- "/Users/bottomly/Desktop/resources/vcfs/mgp.v3.snps.rsIDdbSNPv137.vcf.gz"
vcf.labels <- "SNV"
#the paste procedure is to prevent running off the margin
probe.tab.file <- paste("/Users/bottomly/Desktop/resources/microarray/MoGene-1_0-st-v1.probe.tab/",
	"MoGene-1_0-st-v1.probe.tab")
strain.names <- "NODShiLtJ"
bs.genome <-BSgenome.Mmusculus.GRC.m38
db.schema <- SangerTableSchemaList()
db.name="om.NOD.mogene.1.0.st"
    
keep.category <- "main"
window.size <- 1000
max.mismatch <- 1
should.debug <- TRUE

limit.chr <- c(1:19, "X", "Y", "MT")

 package.info <- list(AUTHOR="Daniel Bottomly", AUTHOREMAIL="bottomly@ohsu.edu",
	BOWTIE_PATH="/Users/bottomly/Desktop/github_projects/bowtie_build/bowtie",
        GENOME_PATH="/Users/bottomly/Desktop/resources/sequences/GRCm38_68",
	VCF_QUERY_CMD="htscmd vcfquery", VCF_TYPE="NOD")

create.sanger.mouse.vcf.db(vcf.files, vcf.labels, probe.tab.file, strain.names, bs.genome, db.schema,
	db.name, keep.category, window.size, max.mismatch, limit.chr, should.debug, package.info)

install.packages("om.NOD.mogene.1.0.st", repos=NULL, type="source")

@

The resulting package \texttt{om.NOD.mogene.1.0.st} can be built, checked and installed using the standard R facilities.  Note that running the tests using R check will only work if BOWTIE\_PATH, GENOME\_PATH and VCF\_QUERY\_CMD are properly specified.  The package can be checked without the tests
by using the '--no-tests' argument to \texttt{R CMD check}.  For now we directly install the package.

<<eval=FALSE, echo=TRUE>>=

install.packages("om.NOD.mogene.1.0.st", repos=NULL, type="source")

@

\section{Expression Analysis}

Analysis of our subset of the Sun et al data can be carried out at the metaprobeset (core) level using both \texttt{oligo} and the \texttt{limma} packages.  Here we simply find the strain differences for the vehicle class of exposure and examine
closer those strain differences where NOD has lower expression than B6.  Note that the \texttt{SunGeneFS.RData} file from above has been saved in the \texttt{oligoMaskData} package and can be utilized as below.  First we carry out the analysis of
the masked data.

<<>>=

library(oligoMask)
library(oligoMaskData)
library(om.NOD.mogene.1.0.st)
library(pd.mogene.1.0.st.v1)
library(limma)
data(oligoMaskData)
 
var.parms <- VariantMaskParams(om.NOD.mogene.1.0.st, geno.filter=FALSE, rm.unmap=FALSE, 
 	rm.mult=FALSE)
 
sun.gfs.mask <- maskRMA(oligoMaskData, target="core", apply.mask=TRUE, 
 	mask.params=var.parms)

sun.exprs.mask <- exprs(sun.gfs.mask)

phen.dta <- data.frame(t(sapply(strsplit(colnames(sun.exprs.mask), "_"), c))[,1:3])
names(phen.dta) <- c("tissue", "strain", "exposure")

use.mod <- model.matrix(~strain, data=phen.dta)
fit <- lmFit(sun.exprs.mask, use.mod)
fit <- eBayes(fit)

sun.exprs.mask.res <- decideTests(fit)

summary(sun.exprs.mask.res)

@

Next we carry out the same analysis, except perform a masking procedure prior to the RMA preprocessing step.

<<>>=

sun.gfs.unmask <- maskRMA(oligoMaskData, target="core", apply.mask=FALSE, 
 	mask.params=var.parms)
        
sun.exprs.unmask <- exprs(sun.gfs.unmask)

um.phen.dta <- data.frame(t(sapply(strsplit(colnames(sun.exprs.unmask), "_"), c))[,1:3])
names(um.phen.dta) <- c("tissue", "strain", "exposure")

um.mod <- model.matrix(~strain, data=um.phen.dta)
um.fit <- lmFit(sun.exprs.unmask, um.mod)
um.fit <- eBayes(um.fit)

sun.exprs.unmask.res <- decideTests(um.fit)

summary(sun.exprs.unmask.res)

@

We can then compare the two results using a venn diagram.

<<>>=

comb.mat <- cbind(sun.exprs.unmask.res[,"strainNOD", drop=FALSE], Masked=0)
comb.mat[rownames(sun.exprs.mask.res),"Masked"] <- sun.exprs.mask.res[,"strainNOD"]
colnames(comb.mat)[1] <- "UnMasked"
    
vennDiagram(vennCounts(comb.mat))

@


We next can explore further into why there are differences between the metaprobesets.  First we determine which metaprobesets were lost from the masking procedure.  That is, in this case, which ones had all probes impacted by a variant.  Of those
we can then determine which of those were significant in the original (unmasked) tests.

<<>>=

lost.mps <- setdiff(rownames(sun.exprs.unmask.res), rownames(sun.exprs.mask.res))

lost.mps

sig.lost.mps <- intersect(rownames(sun.exprs.unmask.res)[sun.exprs.unmask.res[,"strainNOD"] == -1], lost.mps)

sig.lost.mps

@

That is there are three metaprobesets that were significant in the original analysis that were removed entirely due to variants in each probe.  We can then examine these further as a sanity check using a (currently) unexported function.
First we will retrieve the necessary probes using convienience functions from the \texttt{oligo} package.  Then we will supply the set of unique probe IDs to the \texttt{getProbeVars} function from \texttt{oligoMask}.  The resulting data.frame
can then be filtered to remove all reference genotypes (\texttt{allele\_num = 0} in this case) and the variant -> probe mappings can be examined further.

<<>>=

mps.dta <- getProbeInfo(oligoMaskData, probeType="pm", target="core")

var.mps <- mps.dta[mps.dta$man_fsetid %in% sig.lost.mps,]

var.probes <- unique(var.mps$fid)

var.probes.dta <- oligoMask:::getProbeVars(om.NOD.mogene.1.0.st, probe.ids=as.character(var.probes))

head(var.probes.dta)

any(var.probes.dta$allele_num %in% c(0, -1))

length(intersect(var.probes.dta$probe_id, var.mps$fid)) == length(union(var.probes.dta$probe_id,
	var.mps$fid))

@


\section{Future Directions}

Though currently we only have support for Affymetrix Gene arrays, additional Affymetrix array types supported by \texttt{oligo} can be added upon request.  We will add support for the use of the \texttt{ff} package in conjunction with \texttt{oligo} in the near future.


\section{References}

Sun, Wei, et al. "Transcriptome atlases of mouse brain reveals differential expression across brain regions and genetic backgrounds." G3: Genes| Genomes| Genetics 2.2 (2012): 203-211.


<<eval=TRUE>>=
sessionInfo()
@

\end{document}
